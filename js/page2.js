/*================
    1.ÂàùÊúüË®≠ÂÆö
===============*/
//#region

//ÂàùÊúüÂëº„Å≥Âá∫„Åó
window.addEventListener('DOMContentLoaded', async () => {
  await loadCards(); // „Ç´„Éº„Éâ„Éá„Éº„ÇøË™≠„ÅøËæº„Åø
  updateSavedDeckList();  // „Åù„ÅÆÂæå„Å´‰øùÂ≠ò„Éá„ÉÉ„Ç≠‰∏ÄË¶ß„ÇíË°®Á§∫
  setTimeout(()=> window.__bindLongPressForCards('deckmaker'), 0);
});

// Êó•‰ªò„Éï„Ç©„Éº„Éû„ÉÉ„Éà
function formatYmd(d = new Date()) {
  const y = d.getFullYear();
  const m = String(d.getMonth() + 1).padStart(2, "0");
  const da = String(d.getDate()).padStart(2, "0");
  return `${y}/${m}/${da}`;
}

// ‰ª£Ë°®„Ç´„Éº„Éâ„ÅÆ„Ç∞„É≠„Éº„Éê„É´Â§âÊï∞
let representativeCd = null;

//#endregion
/*===================
    2.‰∏ÄË¶ß„Ç´„Éº„ÉâÁîüÊàê
================*/

//#regioncard
//„Ç´„Éº„Éâ‰∏ÄË¶ßÁîüÊàê
function generateCardListElement(card) {
  const cardDiv = document.createElement('div');
  cardDiv.classList.add('card');

  cardDiv.setAttribute('data-cd', card.cd);
  cardDiv.setAttribute('data-name', card.name);
  cardDiv.setAttribute('data-effect1', card.effect_name1 ?? "");
  cardDiv.setAttribute('data-effect2', card.effect_name2 ?? "");
  cardDiv.setAttribute('data-race', card.race);
  cardDiv.setAttribute('data-category', card.category);
  cardDiv.setAttribute('data-rarity', card.rarity);
  cardDiv.setAttribute('data-type', card.type);
  cardDiv.setAttribute('data-cost', card.cost);
  cardDiv.setAttribute('data-power', card.power);
  cardDiv.setAttribute('data-pack', card.pack_name);
  cardDiv.setAttribute('data-effect', [card.effect_name1, card.effect_name2].filter(Boolean).join(','));
  cardDiv.setAttribute('data-field', card.field);
  cardDiv.setAttribute('data-ability', card.special_ability);
  cardDiv.setAttribute('data-bp', String(card.BP_flag ?? "").toLowerCase());
  cardDiv.setAttribute('data-draw', String(card.draw ?? "").toLowerCase());
  cardDiv.setAttribute('data-graveyard_Recovery', String(card.graveyard_recovery ?? "").toLowerCase());
  cardDiv.setAttribute('data-cardsearch', String(card.cardsearch ?? "").toLowerCase());
  cardDiv.setAttribute('data-destroy_Opponent', String(card.destroy_opponent ?? "").toLowerCase());
  cardDiv.setAttribute('data-destroy_Self', String(card.destroy_self ?? "").toLowerCase());



  // UI„Éë„Éº„ÉÑ
  const zoomBtn = document.createElement('div');
  zoomBtn.classList.add('zoom-btn');
  zoomBtn.innerText = 'üîé';
  zoomBtn.setAttribute('onclick', 'handleZoomClick(event, this)');
  cardDiv.appendChild(zoomBtn);

  const ownedMark = document.createElement('div');
  ownedMark.classList.add('owned-mark');
  cardDiv.appendChild(ownedMark);

const img = document.createElement('img');
img.alt = card.name;
img.loading = 'lazy';
img.src = `img/${card.cd}.webp`;

// „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÔºöÂÄãÂà•ÁîªÂÉè„ÅåÁÑ°„ÅÑ„Å®„Åç„ÅØ 00000.webp „Çí‰Ωø„ÅÜ
img.onerror = () => {
  if (img.dataset.fallbackApplied) return; // ÁÑ°Èôê„É´„Éº„ÉóÈò≤Ê≠¢
  img.dataset.fallbackApplied = '1';
  img.src = 'img/00000.webp';
};

// Â∑¶„ÇØ„É™„ÉÉ„ÇØ„Åß addCard() „ÇíÂëº„Å∂
img.onclick = (e) => { e.stopPropagation(); addCard(card.cd); };

// Âè≥„ÇØ„É™„ÉÉ„ÇØ„É°„Éã„É•„Éº„ÇíÂá∫„Åï„Å™„ÅÑ
img.addEventListener('contextmenu', e => {
  e.preventDefault();
});

// PC„Éñ„É©„Ç¶„Ç∂„ÅÆ„ÉÄ„Éñ„É´„ÇØ„É™„ÉÉ„ÇØ„Å´„Çà„ÇãÊã°Â§ß„ÇÇÊäëÊ≠¢
img.addEventListener('dblclick', e => {
  e.preventDefault();
});

  cardDiv.appendChild(img);


  return cardDiv;
}


// Ë©≥Á¥∞ÊÉÖÂ†±ÁîüÊàê
function generateDetailHtml(card) {
  const typeClass = `type-${card.type}`;
  const raceClass = `race-${card.race}`;
  const detailId = `detail-${card.cd}`;

  const effectParts = [];

  if (card.effect_name1) {
    effectParts.push(`<div><strong class="effect-name">${card.effect_name1}</strong></div>`);
  }
  if (card.effect_text1) {
    effectParts.push(`<div>${card.effect_text1}</div>`);
  }
  if (card.effect_name2) {
    effectParts.push(`<div><strong class="effect-name">${card.effect_name2}</strong></div>`);
  }
  if (card.effect_text2) {
    effectParts.push(`<div>${card.effect_text2}</div>`);
  }

  const effectHtml = effectParts.join('\n');

  return `
    <div class="card-detail ${typeClass} ${raceClass}" data-name="${card.name}" id="${detailId}">
      <div class="card-name">${card.name}</div>
      <div class="card-meta">
        <span class="card-race">${card.race}</span> /
        <span class="card-category">${card.category}</span>
      </div>
      <div class="card-effect">
        ${effectHtml}
      </div>
    </div>
  `;
}

//„Ç´„Éº„Éâ‰∏ÄË¶ßÂÜçË™≠„ÅøËæº„Åø
function rebuildCardMap() {
  Object.keys(cardMap).forEach(key => delete cardMap[key]);
  document.querySelectorAll('.card').forEach(cardEl => {
    const cd = cardEl.dataset.cd;
    cardMap[cd] = {
      name: cardEl.querySelector('img')?.alt || "",
      race: cardEl.dataset.race || "",
      type: cardEl.dataset.type || "",
      cost: parseInt(cardEl.dataset.cost) || 0,
      power: parseInt(cardEl.dataset.power) || 0,
      rarity: cardEl.dataset.rarity || ""
    };
  });
}

//#endregioncard

/*=================
    3.„É°„Éã„É•„Éº„Éê„Éº
=================*/
//#region
/*=====‰ΩøÁî®‰∏çÂèØÁ®ÆÊóèÂà§ÂÆö=====*/
//#regionhiderace
  // ‰ΩøÁî®‰∏çÂèØÁ®ÆÊóèË°®Á§∫ÂàáÊõø„Éï„É©„Ç∞
  let hideInvalidRace = false;

// ‰ΩøÁî®‰∏çÂèØÁ®ÆÊóèË°®Á§∫/ÈùûË°®Á§∫„Éú„Çø„É≥
document.getElementById("toggle-invalid-race").addEventListener("click", function () {
  hideInvalidRace = !hideInvalidRace;
  this.classList.toggle("active", hideInvalidRace);
  this.textContent = hideInvalidRace ? "üö´‰ΩøÁî®‰∏çÂèØÁ®ÆÊóè„ÇíÈùûË°®Á§∫" : "‚úÖ‰ΩøÁî®‰∏çÂèØÁ®ÆÊóè„ÇíË°®Á§∫(„É¢„Éé„ÇØ„É≠)";
  applyGrayscaleFilter();
});

// ‰ΩøÁî®‰∏çÂèØÁ®ÆÊóè„Ç´„Éº„Éâ„Çí„É¢„Éé„ÇØ„É≠Âåñ or ÈùûË°®Á§∫„Å´„Åô„Çã
function applyGrayscaleFilter() {
  const cards = document.querySelectorAll(".card");
  cards.forEach(card => {
    const isGrayscale = card.classList.contains("grayscale");

    if (hideInvalidRace && isGrayscale) {
      card.classList.add("hidden-by-grayscale");
    } else {
      card.classList.remove("hidden-by-grayscale");
    }
  });
}
//#endregionhiderace

/* =========================
   ÊâÄÊåÅ„Ç´„Éº„Éâ„Ç™„Éº„Éê„Éº„É¨„Ç§Ë°®Á§∫Ôºà„Éá„ÉÉ„Ç≠„É°„Éº„Ç´„ÉºÁî®ÔºèÂàùÊúü„ÅØÊú™ÂèçÊò†Ôºâ
   ========================= */

// ON/OFF Áä∂ÊÖãÔºàÂàùÊúüOFFÔºö„Éú„Çø„É≥ÂàùÊúüË°®Á§∫„Å®Âêà„Çè„Åõ„ÇãÔºâ
let ownedOverlayOn = false;

// ÊâÄÊåÅ„Éá„Éº„ÇøÂèñÂæóÔºàOwnedStoreÂÑ™ÂÖà„ÄÅ„Å™„Åë„Çå„Å∞ localStorageÔºâ
function readOwnedMapForDeckmaker() {
  // 1) ÁîªÈù¢„ÅÆÁúüÂÆü„ÅØ OwnedStoreÔºà„Ç≤„Çπ„ÉàÊâÄÊåÅ„ÇÑÊú™‰øùÂ≠òÁ∑®ÈõÜ„ÇíÂê´„ÇÄÔºâ
  if (window.OwnedStore?.getAll) {
    return window.OwnedStore.getAll();
  }
  // 2) „Åæ„Çå„Å´ OwnedStore Êú™ÂàùÊúüÂåñ„Å™„Çâ„ÄÅÊúÄÂæå„Å´‰øùÂ≠ò„Åï„Çå„Åü„ÇÇ„ÅÆ„ÇíË™≠„ÇÄ
  try {
    const raw = JSON.parse(localStorage.getItem('ownedCards') || '{}') || {};
    const norm = {};
    for (const cd in raw) {
      const v = raw[cd];
      norm[cd] = (v && typeof v === 'object')
        ? { normal: v.normal|0, shine: v.shine|0, premium: v.premium|0 }
        : { normal: v|0,      shine: 0,            premium: 0 };
    }
    return norm;
  } catch {
    return {};
  }
}


// 1Êûö„ÅÆ„Ç´„Éº„ÉâË¶ÅÁ¥†„Å∏ÊâÄÊåÅÊï∞„ÇíÊèèÁîªÔºàÊú™ÊâÄÊåÅ=0„ÇÇË°®Á§∫Ôºâ
function paintOwnedMarkDeckmaker(cardEl, total) {
  // „Éá„ÉÉ„Ç≠ÊßãÁØâ„ÅÆ‰∏äÈôêÊÉ≥ÂÆö„Åß„ÇØ„É©„É≥„ÉóÔºà0„Äú3Ôºâ
  const count = Math.max(0, Math.min(3, total|0));
  const mark = cardEl.querySelector('.owned-mark');

  if (ownedOverlayOn) {
    cardEl.classList.add('owned'); // CSS„ÅßË°®Á§∫„Éà„É™„Ç¨„Éº
    mark.textContent = String(count); // 0 „ÇÇË°®Á§∫
    mark.style.display = 'flex';      // Âøµ„ÅÆ„Åü„ÇÅÂº∑Âà∂Ë°®Á§∫
  } else {
    // OFFÊôÇ„ÅØÈùûË°®Á§∫
    cardEl.classList.remove('owned', 'owned-1', 'owned-2', 'owned-3');
    mark.textContent = '';
    mark.style.display = 'none';
  }

  if (window.__guestOwnedActive) mark.classList.add('guest-mode'); else mark.classList.remove('guest-mode');

  // ‰ªñ„Éö„Éº„Ç∏‰∫íÊèõ„ÅÆ„Åü„ÇÅÔºàÂøÖË¶Å„Å™„ÇâÔºâ
  cardEl.dataset.count = String(count);
}

// ÁîªÈù¢‰∏≠„ÅÆ„Ç´„Éº„ÉâÂÖ®„Å¶„Å´ÂèçÊò†Ôºà#grid „ÇíË¶ã„ÇãÔºâ
function refreshOwnedOverlay() {
  const ownedMap = readOwnedMapForDeckmaker();
  document.querySelectorAll('#grid .card').forEach(cardEl => {
    const cd = cardEl.dataset.cd;
    const v = ownedMap[cd] || { normal:0, shine:0, premium:0 };
    const total = (v.normal|0) + (v.shine|0) + (v.premium|0);
    paintOwnedMarkDeckmaker(cardEl, total);
  });
}

// „Éà„Ç∞„É´Ôºà„Éú„Çø„É≥„Å®ÂêåÊúüÔºâ
function toggleOwned() {
  if (window.__guestOwnedActive) return; // „Ç≤„Çπ„Éà„É¢„Éº„Éâ„ÅØÊìç‰Ωú‰∏çÂèØ
  ownedOverlayOn = !ownedOverlayOn;
  const btn = document.getElementById('toggleOwnedBtn');
  if (btn) btn.textContent = `ÊâÄÊåÅ„Ç´„Éº„Éâ${ownedOverlayOn ? 'ÂèçÊò†' : 'Êú™ÂèçÊò†'}`;
  refreshOwnedOverlay();
  updateExchangeSummary();          // Êï∞ÂÄ§/‰∏çË∂≥„É™„Çπ„Éà„ÇíÊúÄÊñ∞Âåñ
  updateOwnedPanelsVisibility();    // Ë°®Á§∫/ÈùûË°®Á§∫„ÇíÂèçÊò†
}


document.addEventListener('DOMContentLoaded', () => {
  // ÂàùÊúü„ÅØ„ÄåÊú™ÂèçÊò†„Äç„É©„Éô„É´„ÅÆ„Åæ„Åæ„Å´„Åó„Å¶„Åä„Åè
  const btn = document.getElementById('toggleOwnedBtn');
  if (btn) btn.textContent = 'ÊâÄÊåÅ„Ç´„Éº„ÉâÊú™ÂèçÊò†';

  // ÂàùÊúüÊ≠£Ë¶èÂåñÔºàÈùûË°®Á§∫„ÅÆ„Åæ„ÅæÊï¥„Åà„ÇãÔºâ
  refreshOwnedOverlay();
updateOwnedPanelsVisibility();  // Ëµ∑ÂãïÁõ¥Âæå„ÅÆË°®Á§∫Áä∂ÊÖã„ÇíÂêåÊúü

  // #grid „ÅÆÂÜçÊèèÁîª„Å´„ÇÇËøΩÂæìÔºàON„ÅÆ„Å®„Åç„ÅÆ„ÅøÂç≥ÊôÇÂèçÊò†Ôºâ
  const root = document.getElementById('grid');
  if (root) {
    let busy = false;
    new MutationObserver(muts => {
      if (busy || !ownedOverlayOn) return;
      if (!muts.some(m => m.addedNodes?.length || m.removedNodes?.length)) return;
      busy = true;
      requestAnimationFrame(() => { refreshOwnedOverlay(); busy = false; });
    }).observe(root, { childList: true, subtree: true });
  }
});

// „Ç∞„É≠„Éº„Éê„É´ÂÖ¨ÈñãÔºàonclick „Åã„ÇâÂëº„Å∂„Åü„ÇÅÔºâ
window.toggleOwned = toggleOwned;
window.refreshOwnedOverlay = refreshOwnedOverlay;


// „Éá„ÉÉ„Ç≠„Éê„ÉºÊìç‰ΩúÔºàÂè≥„ÇØ„É™„ÉÉ„ÇØÈò≤Ê≠¢Ôºâ
document.addEventListener("contextmenu", e => {
  const deckBarTop = document.getElementById("deckBarTop");
  if (deckBarTop && deckBarTop.contains(e.target)) {
    e.preventDefault();
  }
});


//ÂàÜÊûê„Çø„Éñ„Å∏ÁßªÂãï
function goToAnalyzeTab() {
  // „Äå„Éá„ÉÉ„Ç≠ÂàÜÊûê„Äç„Çø„Éñ„Å´Âàá„ÇäÊõø„Åà
  const tab2 = document.querySelector('#tab2');
  if (tab2) switchTab('edit', tab2);
  renderDeckList();  // „Éá„ÉÉ„Ç≠„Å´Âê´„Åæ„Çå„Çã„Ç´„Éº„ÉâÁîªÂÉè„Çí‰∏ÄË¶ßË°®Á§∫
  updateDeckAnalysis();  // ÂàÜÊûê„Ç∞„É©„Éï„ÇÑ„É¨„Ç¢„É™„ÉÜ„Ç£ÊØîÁéá„Å™„Å©„ÇíÊõ¥Êñ∞
  updateExchangeSummary();  // „Éù„Ç§„É≥„ÉàÁ≠â„ÅÆ„Çµ„Éû„É™„Éº„ÇíÊõ¥Êñ∞
}

//„Éá„ÉÉ„Ç≠ÊÉÖÂ†±ÈñãÈñâ
  function toggleDeckSummary() {
    const summary = document.getElementById('deck-summary');
    summary.classList.toggle('open');
  }


// =====================
// ÂÖ±ÊúâURLÔºà?o=...ÔºâÂèó‰ø° ‚Üí „Ç≤„Çπ„ÉàÊâÄÊåÅ„ÅßÂèçÊò†
// =====================

// --- decoder helpers ---
function xorChecksumHex(bytes){
  let x = 0; for (let i = 0; i < bytes.length; i++) x ^= bytes[i];
  return (x & 0xff).toString(16).padStart(2, '0');
}
function decodeVarint(bytes, offs = 0){
  let x = 0, shift = 0, i = offs;
  for (; i < bytes.length; i++){
    const b = bytes[i];
    x |= (b & 0x7f) << shift;
    if ((b & 0x80) === 0){ i++; break; }
    shift += 7;
  }
  return [x >>> 0, i - offs];
}
function unpack2bitExact(bytes, k){
  const out = new Uint8Array(k);
  for (let i = 0; i < k; i++){
    const q = i >> 2, r = i & 3;
    out[i] = (bytes[q] >> (r * 2)) & 3;
  }
  return out;
}
function bitsetGet(bitset, i){ return (bitset[i >> 3] >> (i & 7)) & 1; }

// v1/v2/v3 „Åô„Åπ„Å¶Ë™≠„ÇÅ„ÇãÊ±éÁî®„Éá„Ç≥„Éº„ÉÄ
function decodeOwnedCountsFromPayload(payload, orderLen){
  if (!payload || payload.length < 3) throw new Error('invalid payload');
  const ver = payload[0];
  const csHex = payload.slice(1,3);
  const b64 = payload.slice(3);
  const bytes = bytesFromB64url(b64);
  const now = xorChecksumHex(bytes);
  if (now !== csHex) console.warn('Checksum mismatch: expected', csHex, 'got', now);

  if (ver === '1'){
    // ÂÖ®„Ç´„Éº„Éâ2bitÂõ∫ÂÆö
    return unpack2bitExact(bytes, orderLen);

  } else if (ver === '2'){
    // bitset + Èùû0ÂÄ§Âàó(2bit)
    const bitsetLen = Math.ceil(orderLen / 8);
    if (bytes.length < bitsetLen) throw new Error('bitset too short');
    const bitset = bytes.slice(0, bitsetLen);
    const valuesBytes = bytes.slice(bitsetLen);
    let K = 0; for (let i = 0; i < orderLen; i++) if (bitsetGet(bitset, i)) K++;
    const values = unpack2bitExact(valuesBytes, K);
    const counts = new Uint8Array(orderLen);
    let p = 0;
    for (let i = 0; i < orderLen; i++){
      counts[i] = bitsetGet(bitset, i) ? (values[p++] & 3) : 0;
    }
    return counts;

  } else if (ver === '3'){
    // [K(varint)] [gapPlus varint √óK] [values(2bit KÂÄã)]
    let idx = 0;
    const [K, used0] = decodeVarint(bytes, idx); idx += used0;
    const positions = new Array(K);
    let prev = -1;
    for (let i = 0; i < K; i++){
      const [gapPlus, used] = decodeVarint(bytes, idx); idx += used;
      const pos = prev + gapPlus; // gapPlus = pos - prev
      positions[i] = pos;
      prev = pos;
    }
    const valuesBytes = bytes.slice(idx);
    const values = unpack2bitExact(valuesBytes, K);
    const counts = new Uint8Array(orderLen);
    for (let i = 0; i < K; i++){
      const pos = positions[i];
      if (pos >= 0 && pos < orderLen) counts[pos] = values[i] & 3;
    }
    return counts;
  }

  throw new Error('unsupported version');
}




// „Ç´„Éº„ÉâÈ†ÜÔºàcdÊòáÈ†Ü/is_latestÔºâ
async function getCanonicalOrderForOwned_DM(){
  if (window.__CARD_ORDER && window.__CARD_ORDER.length) return window.__CARD_ORDER.slice();
  let cards = [];
  try{
    if (typeof fetchLatestCards === 'function'){
      cards = await fetchLatestCards();
    }else{
      const res = await fetch('public/cards_latest.json'); // Áí∞Â¢É„Å´Âêà„Çè„Åõ„Å¶
      const all = await res.json();
      cards = all.filter(c => c.is_latest);
    }
  }catch(e){ console.error(e); }
  cards.sort((a,b) => (parseInt(a.cd,10)||0) - (parseInt(b.cd,10)||0));
  window.__CARD_ORDER = cards.map(c => String(c.cd));
  return window.__CARD_ORDER.slice();
}

// „Ç≤„Çπ„ÉàÊâÄÊåÅ„Çí OwnedStore „Å´ÂèçÊò†Ôºà‰øùÂ≠ò„ÅØ„Åó„Å™„ÅÑÔºâ
async function applyGuestOwned(payload){
  const order = await getCanonicalOrderForOwned_DM();
  const counts = decodeOwnedCountsFromPayload(payload, order.length); // ‚Üê v3ÂØæÂøúÁâà„Çí‰ΩøÁî®

  if (!window.OwnedStore?.set){
    console.warn('OwnedStoreÊú™ÂàùÊúüÂåñ');
    return;
  }

  // „Ç≤„Çπ„Éà„É¢„Éº„ÉâÔºö„Ç™„Éº„Éà„Çª„Éº„ÉñÁÑ°Âäπ
  if (typeof OwnedStore.setAutosave === 'function') OwnedStore.setAutosave(false);
  window.__guestOwnedActive = true;
  window.__guestOwnedPayload = payload;

  // ÂèçÊò†
  for (let i=0;i<order.length;i++){
    const cd = String(order[i]);
    const n = counts[i] & 3;
    OwnedStore.set(cd, { normal: n, shine: 0, premium: 0 });
  }

  // UIÊõ¥Êñ∞ÔºàÂà©Áî®ÂÅ¥„Å´Âêà„Çè„Åõ„Å¶Ë™øÊï¥Ôºâ
  if (typeof window.applyGrayscaleFilter === 'function') window.applyGrayscaleFilter();
  if (typeof window.updateOwnedTotal === 'function') window.updateOwnedTotal();
  if (typeof window.updateSummary === 'function') window.updateSummary();
  // „Ç≤„Çπ„ÉàUIÈÅ©Áî®Ôºà„Éú„Çø„É≥ÁÑ°ÂäπÂåñ„ÉªËâ≤Â§âÊõ¥„ÉªÊâÄÊåÅ„Ç™„Éº„Éê„Éº„É¨„Ç§ONÔºâ
  markGuestModeUI();
}

// „Ç≤„Çπ„Éà„É¢„Éº„Éâ„ÅÆUIÂèçÊò†Ôºà„Éú„Çø„É≥ÁÑ°ÂäπÂåñ„ÉªËâ≤Â§âÊõ¥„ÉªÊâÄÊåÅ„Ç™„Éº„Éê„Éº„É¨„Ç§ONÔºâ
function markGuestModeUI() {
  // „Éú„Çø„É≥„ÇíÁΩÆ„ÅçÊèõ„ÅàÔºÜÁÑ°ÂäπÂåñ
  const btn = document.getElementById('toggleOwnedBtn');
  if (btn) {
    btn.textContent = '‰ªñ‰∫∫ÊâÄÊåÅ„Éá„Éº„ÇøÂèçÊò†';
    btn.classList.add('guest-mode');
    btn.disabled = true;              // Ê©üËÉΩ„Ç™„Éï
    btn.title = '‰ªñ‰∫∫„ÅÆÊâÄÊåÅ„Éá„Éº„Çø„ÇíË°®Á§∫‰∏≠';
  }
  // ÊâÄÊåÅ„Ç™„Éº„Éê„Éº„É¨„Ç§„ÇíON„Å´„Åó„Å¶ÂèçÊò†
  ownedOverlayOn = true;
  refreshOwnedOverlay();

  updateExchangeSummary();          // „Ç≤„Çπ„ÉàÊâÄÊåÅ„Åß„ÅÆË®àÁÆóÁµêÊûú„Å´Êõ¥Êñ∞
  updateOwnedPanelsVisibility();    // „Éë„Éç„É´„ÇíË°®Á§∫

  // owned-mark„Å´ÁõÆÂç∞„ÇØ„É©„Çπ
  document.querySelectorAll('#grid .owned-mark').forEach(el => {
    el.classList.add('guest-mode');
  });
}


// Ëµ∑ÂãïÊôÇ„Å´ ?o= „ÇíÊ§úÂá∫ÔºàÂÖ®„Çπ„ÇØ„É™„Éó„ÉàË™≠‰∫ÜÂæå„Å´ÂÆüË°åÔºâ
document.addEventListener('DOMContentLoaded', () => {
  const params = new URLSearchParams(location.search);
  const payload = params.get('o');
  if (!payload) return;
  (async () => {
    try{
      await applyGuestOwned(payload);
    }catch(e){
      console.error(e);
      alert('ÂÖ±Êúâ„Éá„Éº„Çø„ÅÆË™≠„ÅøËæº„Åø„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
    }
  })();
});

// --- Base64URL ‚Üí bytesÔºà‚Äª„Éë„Éá„Ç£„É≥„Ç∞Âæ©ÂÖÉ„ÅÇ„ÇäÔºâ ---
function bytesFromB64url(s){
  s = s.replace(/-/g,'+').replace(/_/g,'/');
  const mod = s.length & 3;
  if (mod === 2) s += '==';
  else if (mod === 3) s += '=';
  else if (mod === 1) s += '===';
  const bin = atob(s);
  const out = new Uint8Array(bin.length);
  for (let i = 0; i < bin.length; i++) out[i] = bin.charCodeAt(i);
  return out;
}

// v1Áî®Ôºö„Éï„É´2bitÂàó„ÇíÂ±ïÈñã
function unpack2bit(bytes, length){
  const out = new Uint8Array(length);
  for (let i=0;i<length;i++){
    const q = i >> 2, r = i & 3;
    out[i] = (bytes[q] >> (r*2)) & 3;
  }
  return out;
}


//#endregion


/*======================
    4.„Éá„ÉÉ„Ç≠ÊÉÖÂ†±Ë™≠„ÅøÂèñ„Çä
======================*/
//#regiondeck

/*=======„Éá„ÉÉ„Ç≠„É°„Ç§„É≥Á®ÆÊóèÂà§Âà•======*/
//#regionMainraces
// Á®ÆÊóè„ÅÆÁ®ÆÂà•Âà§ÂÆö„Éò„É´„Éë„Éº
function getRaceType(race) {
  if (race === "ÊóßÁ•û") return "kyuushin";
  if (race === "„Ç§„Éé„Çª„É≥„Éà") return "innocent";
  if (["„Éâ„É©„Ç¥„É≥", "„Ç¢„É≥„Éâ„É≠„Ç§„Éâ", "„Ç®„É¨„É°„É≥„Çø„É´", "„É´„Éü„Éä„Çπ", "„Ç∑„Çß„Ç§„Éâ"].includes(race)) return "main";
  return "other";
}

// „É°„Ç§„É≥Á®ÆÊóè„ÅÆÂÆöÁæ©„Å®„Éò„É´„Éë„Éº
const MAIN_RACES = ["„Éâ„É©„Ç¥„É≥", "„Ç¢„É≥„Éâ„É≠„Ç§„Éâ", "„Ç®„É¨„É°„É≥„Çø„É´", "„É´„Éü„Éä„Çπ", "„Ç∑„Çß„Ç§„Éâ"];

// „Éá„ÉÉ„Ç≠ÂÜÖ„Å´Â≠òÂú®„Åô„Çã„É°„Ç§„É≥Á®ÆÊóè„ÇíÔºàÈáçË§á„Å™„Åó„ÅßÔºâÈÖçÂàó„ÅßËøî„Åô
function getMainRacesInDeck() {
  const races = Object.keys(deck)
    .map(cd => cardMap[cd]?.race)
    .filter(r => MAIN_RACES.includes(r));
  return [...new Set(races)]; // ÈáçË§áÊéíÈô§
}

// „Éá„ÉÉ„Ç≠„ÅÆ‰ª£Ë°®„É°„Ç§„É≥Á®ÆÊóè
function getMainRace() {
  const list = getMainRacesInDeck();
  return list[0] || "„Éâ„É©„Ç¥„É≥";//ÁÑ°„ÅÑ„Å®„Åç„ÅØ„Éâ„É©„Ç¥„É≥
}
//#endregionMainraces




//#endregiondeck

/*==================
    5.„Éá„ÉÉ„Ç≠Êìç‰Ωú
===================*/
//#region

//„Ç´„Éº„ÉâËøΩÂä†
function addCard(cd) {
  const card = cardMap[cd];
  if (!card) return;

  const race = card.race || "";
  const raceType = getRaceType(race);
  const isKyuushin = race === "ÊóßÁ•û";

  // Êó¢„Å´3ÊûöÂÖ•„Å£„Å¶„ÅÑ„Çå„Å∞ËøΩÂä†‰∏çÂèØ
  if ((deck[cd] || 0) >= 3) return;

  // ÊóßÁ•û„ÅØ1Êûö„Åæ„Åß„ÄÅ„Åã„Å§‰ªñ„ÅÆÊóßÁ•û„Åå„ÅÑ„ÇãÂ†¥Âêà„ÅØËøΩÂä†‰∏çÂèØ
  if (isKyuushin) {
    if ((deck[cd] || 0) >= 1) return;
    const hasOtherOldGod = Object.keys(deck).some(id => cardMap[id]?.race === "ÊóßÁ•û" && id !== cd);
    if (hasOtherOldGod) return;
  }

  // „É°„Ç§„É≥Á®ÆÊóè„ÅØ1Á®ÆÈ°û„ÅÆ„Åø
  if (raceType === "main") {
    const currentMainRaces = getMainRacesInDeck();
    const unique = new Set([...currentMainRaces, race]);
    if (unique.size > 1) return; // 2Á®ÆÈ°ûÁõÆ„ÅØËøΩÂä†‰∏çÂèØ
  }
  //„Ç´„Éº„ÉâËøΩÂä†
  deck[cd] = (deck[cd] || 0) + 1;
  updateDeck();//„Éá„ÉÉ„Ç≠ÊÉÖÂ†±Êõ¥Êñ∞
  applyGrayscaleFilter();//‰ªñÁ®ÆÊóè„É¢„Éé„ÇØ„É≠orÈùûË°®Á§∫
}

//„Ç´„Éº„ÉâÂâäÈô§
function removeCard(cd) {
  if (!deck[cd]) return;
  if (deck[cd] > 1) {
    deck[cd]--;//1ÊûöÊ∏õ„Çâ„Åô
  } else {
    delete deck[cd];//ÂâäÈô§
  }
  updateDeck();//„Éá„ÉÉ„Ç≠ÊÉÖÂ†±Êõ¥Êñ∞
  applyGrayscaleFilter();//‰ªñÁ®ÆÊóè„É¢„Éé„ÇØ„É≠orÈùûË°®Á§∫
}


/*„Éá„ÉÉ„Ç≠ÊÉÖÂ†±Êõ¥Êñ∞*/
/*Ë™¨Êòé
 * „Éá„ÉÉ„Ç≠„Éê„Éº„Å®„Éá„ÉÉ„Ç≠ÊÉÖÂ†±„ÇíÊõ¥Êñ∞„Åô„Çã„É°„Ç§„É≥Èñ¢Êï∞„ÄÇ
 * „Éá„ÉÉ„Ç≠ÂÜÖ„Ç´„Éº„Éâ„Çí‰∏¶„Å≥Êõø„Åà„Å¶Ë°®Á§∫„Åó„ÄÅÁ®ÆÊóè„ÇÑ„Çø„Ç§„Éó„ÅÆÂÜÖË®≥„ÇíÈõÜË®à„Åô„Çã„ÄÇ
 */
function updateDeck() {
  const deckBarTop = document.getElementById("deckBarTop");
  deckBarTop.innerHTML = "";

  // „Çµ„Éû„É™„ÉºÈõÜË®à
  let total = 0;
  const typeCount = { "„ÉÅ„É£„Éº„Ç∏„É£„Éº": 0, "„Ç¢„Çø„ÉÉ„Ç´„Éº": 0, "„Éñ„É≠„ÉÉ„Ç´„Éº": 0 };
  const races = new Set();
  let hasOldGod = false;

  Object.entries(deck).forEach(([cd, count]) => {
    const card = cardMap[cd];
    if (!card) return;
    total += count;
    typeCount[card.type] += count;
    if (card.race !== "„Ç§„Éé„Çª„É≥„Éà" && card.race !== "ÊóßÁ•û") {
      races.add(card.race);
    }
    if (card.race === "ÊóßÁ•û") {
      hasOldGod = true;
    }
  });

  // „Éá„ÉÉ„Ç≠„Éê„ÉºÊ®™„ÅÆ„Çµ„Éû„É™„Éº„ÇíÊõ¥Êñ∞Ôºà‚Äª0Êûö„Åß„ÇÇ„Åì„Åì„Åß„Çº„É≠„ÅåÂÖ•„ÇãÔºâ
  const summary = document.getElementById("deck-summary");
  const info = summary.querySelector(".deck-info") || (() => {
    const el = document.createElement("div");
    el.className = "deck-info";
    summary.insertBefore(el, summary.firstChild);
    return el;
  })();
  info.innerHTML = `
    „Éá„ÉÉ„Ç≠ÊûöÊï∞Ôºö${total} /30~40<br>
    ‰ΩøÁî®Á®ÆÊóèÔºö${races.size > 0 ? Array.from(races).join("/") : "„Å™„Åó"}<br>
    ÊóßÁ•ûÔºö${hasOldGod ? "Êé°Áî®‰∏≠" : "Êú™Êé°Áî®"}<br>
    üîµ ${typeCount["„ÉÅ„É£„Éº„Ç∏„É£„Éº"]} üü£ ${typeCount["„Ç¢„Çø„ÉÉ„Ç´„Éº"]} ‚ö™Ô∏è ${typeCount["„Éñ„É≠„ÉÉ„Ç´„Éº"]}
  `;

  // Á©∫„ÅÆ„Å®„Åç„ÅØ„Éò„É´„Éó„ÉÜ„Ç≠„Çπ„Éà„ÇíË°®Á§∫
  if (Object.keys(deck).length === 0) {
    deckBarTop.innerHTML = `
      <div id="deck-empty-text">
        <div style="font-size: 0.7rem;">„Éá„ÉÉ„Ç≠„Éê„ÉºÊìç‰Ωú</div>
        <div class="deck-help" id="deckHelp">
          <div>„ÄêPC„Äë<br>„ÉªÂ∑¶„ÇØ„É™„ÉÉ„ÇØÔºöËøΩÂä†<br>„ÉªÂè≥„ÇØ„É™„ÉÉ„ÇØÔºöÂâäÈô§</div>
          <div>„Äê„Çπ„Éû„Éõ„Äë<br>„Éª‰∏ä„Éï„É™„ÉÉ„ÇØÔºöËøΩÂä†<br>„Éª‰∏ã„Éï„É™„ÉÉ„ÇØÔºöÂâäÈô§</div>
        </div>
      </div>
    `;
    // ‰∏ÄË¶ßÂÅ¥„ÅÆ„Ç´„Éº„ÉâÁä∂ÊÖã„Å® deck-info „Çí„É™„Çª„ÉÉ„Éà
    updateCardDisabling();
    updateDeckSummary([]);
    updateExchangeSummary();
    updateOwnedPanelsVisibility();
    return;
  }

  // „Éá„ÉÉ„Ç≠„Çí„Çø„Ç§„Éó‚Üí„Ç≥„Çπ„Éà‚Üí„Éë„ÉØ„Éº‚ÜíIDÈ†Ü„Å´„ÇΩ„Éº„Éà
  const typeOrder = { "„ÉÅ„É£„Éº„Ç∏„É£„Éº": 0, "„Ç¢„Çø„ÉÉ„Ç´„Éº": 1, "„Éñ„É≠„ÉÉ„Ç´„Éº": 2 };
  const entries = Object.entries(deck).sort((a, b) => {
    const [cdA, countA] = a;
    const [cdB, countB] = b;
    const cardA = cardMap[cdA];
    const cardB = cardMap[cdB];
    if (!cardA || !cardB) return 0;

    const tA = typeOrder[cardA.type] ?? 99;
    const tB = typeOrder[cardB.type] ?? 99;
    if (tA !== tB) return tA - tB;

    const cA = parseInt(cardA.cost) || 0;
    const cB = parseInt(cardB.cost) || 0;
    if (cA !== cB) return cA - cB;

    const pA = parseInt(cardA.power) || 0;
    const pB = parseInt(cardB.power) || 0;
    if (pA !== pB) return pA - pB;

    return cdA.localeCompare(cdB);
  });

  // ‰∏¶„Å≥Êõø„Åà„ÅüÈ†Ü„Å´„Éá„ÉÉ„Ç≠„Éê„Éº„Å´Ë°®Á§∫
  entries.forEach(([cd, count]) => {
    const card = cardMap[cd];
    if (!card) return;

    const cardEl = document.createElement("div");
    cardEl.className = "deck-card";
    cardEl.dataset.cd = cd;
    cardEl.dataset.race = card.race;

    // ÁîªÂÉè„ÅØ5Ê°ÅID„ÅßË™≠„ÅøËæº„ÇÄ
    const img = document.createElement("img");
    img.src = `img/${cd.slice(0, 5)}.webp`;
    // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÔºöÂÄãÂà•ÁîªÂÉè„ÅåÁÑ°„ÅÑ„Å®„Åç„ÅØ 00000.webp „Çí‰Ωø„ÅÜ
    img.onerror = () => {
      if (img.dataset.fallbackApplied) return; // ÁÑ°Èôê„É´„Éº„ÉóÈò≤Ê≠¢
      img.dataset.fallbackApplied = '1';
      img.src = 'img/00000.webp';
    };
    img.alt = card.name;
    cardEl.appendChild(img);

    // ÊûöÊï∞„Éê„ÉÉ„Ç∏
    const badge = document.createElement("div");
    badge.className = "count-badge";
    badge.textContent = count;
    cardEl.appendChild(badge);

    // PC„ÅÆÂ†¥ÂêàÔºöÂ∑¶„ÇØ„É™„ÉÉ„ÇØËøΩÂä†„ÄÅÂè≥„ÇØ„É™„ÉÉ„ÇØÂâäÈô§
    cardEl.addEventListener("mousedown", e => {
      if (e.button === 2) {
        e.preventDefault();
        removeCard(cd);
      } else if (e.button === 0) {
        e.preventDefault();
        addCard(cd);
      }
    });
    //„É¢„Éê„Ç§„É´„ÅÆÂ†¥ÂêàÔºö‰∏ä‰∏ã„Éï„É™„ÉÉ„ÇØ„ÅßËøΩÂä†/ÂâäÈô§
    (function attachTouchSwipe(el, cd){
      let startX = 0, startY = 0;
      const THRESHOLD = 20; // „Åó„Åç„ÅÑÂÄ§ÔºàpxÔºâ
      const MAX_SHIFT = 40; // Ë¶ñË¶ö„Ç¢„Éã„É°Ë∑ùÈõ¢ÔºàpxÔºâ

      const cleanUp = () => {
        el.style.transform = 'translateY(0)';
        el.style.zIndex = '';
      };

      el.addEventListener('touchstart', (e) => {
        if (e.touches.length !== 1) return;
        const t = e.touches[0];
        startX = t.clientX;
        startY = t.clientY;
        el.style.transition = '';
        el.style.zIndex = '2000'; // „Éò„ÉÉ„ÉÄ„ÉºÁ≠â„Çà„ÇäÂâçÈù¢
      }, {passive:true});

      el.addEventListener('touchmove', (e) => {
        if (e.touches.length !== 1) return;
        const t = e.touches[0];
        const dx = t.clientX - startX;
        const dy = t.clientY - startY;

        // Ê®™„ÅåÂÑ™Âã¢„Å™„ÇâÔºàdeck-bar „ÅÆ pan-x „ÇíÂ¶®„Åí„Å™„ÅÑÔºâ
        if (Math.abs(dx) > Math.abs(dy)) return;

        // Ë¶ñË¶ö„Éï„Ç£„Éº„Éâ„Éê„ÉÉ„ÇØÔºà¬±40px „Å´Âà∂ÈôêÔºâ
        let limited = Math.max(-MAX_SHIFT, Math.min(MAX_SHIFT, dy));
        el.style.transform = `translateY(${limited}px)`;
      }, {passive:true});

      el.addEventListener('touchend', (e) => {
        const endY = e.changedTouches[0].clientY;
        const diffY = startY - endY; // ‰∏ä=Ê≠£„ÄÅ‰∏ã=Ë≤†
        el.style.transition = 'transform 0.2s ease';

        const isSwipe = Math.abs(diffY) > THRESHOLD;
        if (!isSwipe) {
          setTimeout(() => { el.style.transition = ''; cleanUp(); }, 200);
          return;
        }

        // ÊñπÂêëÂà•„Å´ 40px „Å†„Åë„Çπ„ÉÉ„Å®Âãï„Åã„Åó„Å¶„Åã„ÇâÁ¢∫ÂÆö
        const to = diffY > 0 ? -MAX_SHIFT : MAX_SHIFT;
        el.style.transform = `translateY(${to}px)`;
        setTimeout(() => {
          el.style.transition = '';
          cleanUp();
          if (diffY > 0) {
            // ‰∏ä„Éï„É™„ÉÉ„ÇØÔºöËøΩÂä†Ôºà‰∏äÈôê/ÊóßÁ•û/Á®ÆÊóè„ÅØ addCard ÂÜÖ„ÅßÂà§ÂÆöÔºâ
            addCard(cd);
          } else {
            // ‰∏ã„Éï„É™„ÉÉ„ÇØÔºöÂâäÈô§
            removeCard(cd);
          }
        }, 200);
      }, {passive:true});

      el.addEventListener('touchcancel', () => {
        cleanUp();
      }, {passive:true});
    })(cardEl, cd);

    cardEl.addEventListener("contextmenu", e => e.preventDefault());

    deckBarTop.appendChild(cardEl);
  });


  // „Éá„ÉÉ„Ç≠„Ç´„Éº„Éâ„ÅÆÊÉÖÂ†±„ÇíÈÖçÂàóÂåñ„Åó„Å¶„Çµ„Éû„É™„ÉºÊõ¥Êñ∞
  const deckCards = [];
  Object.entries(deck).forEach(([cd, count]) => {
    const card = cardMap[cd];
    if (!card) return;
    for (let i = 0; i < count; i++) {
      deckCards.push({ Á®ÆÊóè: card.race, „Çø„Ç§„Éó: card.type });
    }
  });

  updateCardDisabling();// „Ç´„Éº„ÉâÁ¶ÅÊ≠¢Ë°®Á§∫„Éª„Éê„ÉÉ„Ç∏Êõ¥Êñ∞„Å™„Å©
  updateDeckSummary(deckCards);//„Éá„ÉÉ„Ç≠ÂàÜÊûêÔºà„Çø„Ç§„ÉóÁ≠âÔºâ
  updateDeckAnalysis();//„Éá„ÉÉ„Ç≠Ë©≥Á¥∞ÊÉÖÂ†±ÂàÜÊûê
  updateExchangeSummary();  // „Éù„Ç§„É≥„ÉàÁ≠â„ÅÆ„Çµ„Éû„É™„Éº„ÇíÊõ¥Êñ∞
  updateOwnedPanelsVisibility(); //Ë°®Á§∫/ÈùûË°®Á§∫„ÇÇÊõ¥Êñ∞
}


/*„Ç´„Éº„Éâ‰ΩøÁî®Áä∂Ê≥ÅÂà§ÂÆö*/
/*Ë™¨Êòé
 * „Ç´„Éº„Éâ„ÅÆ‰ΩøÁî®Áä∂Ê≥Å„Å´Âøú„Åò„Å¶„Éá„ÉÉ„Ç≠Â§ñ„ÅÆ‰∏ÄË¶ß„Çí„Ç∞„É¨„Éº„Çπ„Ç±„Éº„É´„Å´„Åó„Åü„Çä„ÄÅ„Äå‰ΩøÁî®‰∏≠√ón„Äç„ÄåÊóßÁ•û‰ΩøÁî®‰∏≠„Äç„É©„Éô„É´„Çí‰ªò„Åë„ÇãÂá¶ÁêÜ„ÄÇÔºà„Åì„Åì„Åß„ÅØÂü∫Êú¨ÁöÑ„Å™Á¶ÅÊ≠¢/Ë®±ÂèØÂà§ÂÆö„ÅÆ„ÅøÊäúÁ≤ã„Åó„Å¶„ÅÑ„Åæ„ÅôÔºâ
 */
function updateCardDisabling() {
  const deckRaces = new Set();
  let currentOldGod = null;

// „Éá„ÉÉ„Ç≠„Å´Âê´„Åæ„Çå„ÇãÁ®ÆÊóè„Å®ÊóßÁ•û„ÇíÈõÜË®à
  Object.keys(deck).forEach(cd => {
    const card = cardMap[cd];
    if (!card) return;
    if (card.race !== "„Ç§„Éé„Çª„É≥„Éà" && card.race !== "ÊóßÁ•û") {
      deckRaces.add(card.race);
    }
    if (card.race === "ÊóßÁ•û") {
      currentOldGod = card.name;
    }
  });

  document.querySelectorAll(".card").forEach(cardEl => {
    const cd = cardEl.dataset.cd;
    const card = cardMap[cd];
    if (!card) return;

// ‰ΩøÁî®Á®ÆÊóè‰ª•Â§ñÔºà„Ç§„Éé„Çª„É≥„Éà„ÉªÊóßÁ•ûÈô§„ÅèÔºâ„ÅÆÂÆöÁæ©
    const isUnselectedRace =
      deckRaces.size > 0 &&//ÔºëÊûöÂ≠òÂú®
      card.race !== "„Ç§„Éé„Çª„É≥„Éà" &&//„Ç§„Éé„Çª„É≥„Éà‰ª•Â§ñ
      card.race !== "ÊóßÁ•û" &&//ÊóßÁ•û‰ª•Â§ñ
      !deckRaces.has(card.race);//‰ΩøÁî®Á®ÆÊóè„ÇíÊåÅ„Åü„Å™„ÅÑ
//‰ΩøÁî®Á®ÆÊóè‰ª•Â§ñ„Çí„Ç∞„É¨„Éº„Çπ„Ç±„Éº„É´Âåñ
    if (isUnselectedRace) {
      cardEl.classList.add("grayscale");
    } else {
      cardEl.classList.remove("grayscale");
    }

// ‰ΩøÁî®ÊûöÊï∞„ÇÑÊóßÁ•ûÂà©Áî®‰∏≠„ÅÆ„É©„Éô„É´Ë°®Á§∫
    const label = cardEl.querySelector(".used-label") || document.createElement("div");
    label.className = "used-label";
    label.textContent = "";

    if (card.race === "ÊóßÁ•û") {
      if (deck[cd]) {
        label.textContent = "ÊóßÁ•û‰ΩøÁî®";
      } else if (currentOldGod) {
        label.textContent = "‰ªñ„ÅÆÊóßÁ•û„Çí‰ΩøÁî®‰∏≠";
      }
    } else {
      const count = deck[cd] || 0;
      if (count > 0) {
        label.textContent = `‰ΩøÁî®‰∏≠ √ó${count}`;
      }
    }
// „É©„Éô„É´ÁîüÊàê„Éª„ÉÜ„Ç≠„Çπ„ÉàË®≠ÂÆöÂæå
if (!label.dataset.listenerAttached) {
  // Âè≥„ÇØ„É™„ÉÉ„ÇØÔºö„Ç´„Éº„Éâ„Çí1ÊûöÂâäÈô§
  label.addEventListener("contextmenu", e => {
    e.preventDefault();
    e.stopPropagation();
    removeCard(cd);
  });
  // Â∑¶„ÇØ„É™„ÉÉ„ÇØÔºö„Ç´„Éº„Éâ„Çí1ÊûöËøΩÂä†
  label.addEventListener("click", e => {
    e.stopPropagation();
    addCard(cd);
  });
  // „É™„Çπ„Éä„ÉºÁôªÈå≤Ê∏à„Åø„Éï„É©„Ç∞
  label.dataset.listenerAttached = "true";
}

    // Êó¢„Å´‰ªò„ÅÑ„Å¶„ÅÑ„Å™„ÅÑÂ†¥Âêà„Å†„Åë append
    if (!cardEl.contains(label)) {
      cardEl.appendChild(label);
    }
  });

}

//#endregion

/*==============================
    6.„Éá„ÉÉ„Ç≠ÂàÜÊûê-„Éá„ÉÉ„Ç≠„É™„Çπ„ÉàÁîªÈù¢
===============================*/
//#region

//„Éá„ÉÉ„Ç≠„É™„Çπ„ÉàË°®Á§∫
function renderDeckList() {
  const container = document.getElementById('deck-card-list');
  const emptyMessage = document.getElementById('deckcard-empty-message');
  if (!container) return;

  // „ÇØ„É™„Ç¢ÔºÜ„Éó„É¨„Éº„Çπ„Éõ„É´„ÉÄÂ∑Æ„ÅóÊàª„Åó
  container.innerHTML = '';
  if (emptyMessage) container.appendChild(emptyMessage);

  // [cd, ÊûöÊï∞] „Å∏Â§âÊèõ
  const entries = Object.entries(deck);

  // „ÇΩ„Éº„ÉàÔºà„Çø„Ç§„Éó‚Üí„Ç≥„Çπ„Éà‚Üí„Éë„ÉØ„Éº‚ÜíIDÔºâ
  const typeOrder = { '„ÉÅ„É£„Éº„Ç∏„É£„Éº': 0, '„Ç¢„Çø„ÉÉ„Ç´„Éº': 1, '„Éñ„É≠„ÉÉ„Ç´„Éº': 2 };
  entries.sort((a, b) => {
    const [cdA] = a;
    const [cdB] = b;
    const cardA = cardMap[cdA];
    const cardB = cardMap[cdB];
    if (!cardA || !cardB) return 0;
    const typeA = typeOrder[cardA.type] ?? 99;
    const typeB = typeOrder[cardB.type] ?? 99;
    if (typeA !== typeB) return typeA - typeB;
    const costA  = (parseInt(cardA.cost)  || 0);
    const costB  = (parseInt(cardB.cost)  || 0);
    if (costA !== costB) return costA - costB;
    const powerA = (parseInt(cardA.power) || 0);
    const powerB = (parseInt(cardB.power) || 0);
    if (powerA !== powerB) return powerA - powerB;
    return cdA.localeCompare(cdB);
  });


  // ‰ª£Ë°®„Ç´„Éº„Éâ„ÅÆÊï¥ÂêàÊÄß„ÇíÂÖà„Å´Á¢∫ÂÆö
  const representativeExists = entries.some(([cd]) => cd === representativeCd);
  let nextRepresentative = representativeExists
    ? representativeCd
    : (entries.length > 0 ? entries[0][0] : null);

  // Á©∫Ë°®Á§∫Âà∂Âæ°Ôºà„Åì„ÅÆÊôÇÁÇπ„ÅßOKÔºâ
  if (emptyMessage) {
    emptyMessage.style.display = entries.length === 0 ? 'flex' : 'none';
  }
  if (entries.length === 0) {
    // Á©∫„Å™„Çâ‰ª£Ë°®ÂêçË°®Á§∫„Å†„ÅëÂêåÊúü„Åó„Å¶ÁµÇ„Çè„Çä
    representativeCd = null;
    updateDeckSummaryDisplay();
    return;
  }

// ‰∏¶„Å≥Êõø„ÅàÂæå„ÇíDOMÂåñÔºà„Åì„ÅÆÊôÇÁÇπ„Åß‰ª£Ë°®„ÇØ„É©„Çπ„ÇÇ‰ªò‰∏éÔºâ
  for (const [cd, count] of entries) {
    const card = cardMap[cd];
    if (!card) continue;

    const cardEl = document.createElement('div');
    cardEl.className = 'deck-entry';
    cardEl.dataset.cd = cd;
    cardEl.dataset.race = card.race;
    cardEl.dataset.type = card.type;
    cardEl.dataset.rarity = card.rarity || '';

    // ‰ª£Ë°®„Ç´„Éº„Éâ„Å™„Çâ„Åù„ÅÆÂ†¥„Åß„ÇØ„É©„Çπ‰ªò‰∏é
    if (cd === nextRepresentative) {
      cardEl.classList.add('representative');
    }

    const img = document.createElement('img');
    img.src = `img/${cd.slice(0, 5)}.webp`;
    // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÔºöÂÄãÂà•ÁîªÂÉè„ÅåÁÑ°„ÅÑ„Å®„Åç„ÅØ 00000.webp „Çí‰Ωø„ÅÜ
    img.onerror = () => {
      if (img.dataset.fallbackApplied) return; // ÁÑ°Èôê„É´„Éº„ÉóÈò≤Ê≠¢
      img.dataset.fallbackApplied = '1';
      img.src = 'img/00000.webp';
    };
    img.alt = card.name;
    cardEl.appendChild(img);

    const badge = document.createElement('div');
    badge.className = 'count-badge';
    badge.textContent = `√ó${count}`;
    cardEl.appendChild(badge);

    // „ÇØ„É™„ÉÉ„ÇØ„Åß‰ª£Ë°®„Ç´„Éº„Éâ„ÇíÂàáÊõø
    cardEl.addEventListener('click', () => {
      if (representativeCd === cd) return;

      // ‰ª•Ââç„ÅÆ‰ª£Ë°®„Åã„Çâ„ÇØ„É©„ÇπÂâ•„Åå„ÅóÔºàÂøÖË¶ÅÊúÄÂ∞èÈôêÔºâ
      const prev = container.querySelector('.deck-entry.representative');
      if (prev) prev.classList.remove('representative');

      // Êñ∞‰ª£Ë°®„Å´‰ªò‰∏éÔºÜÂ§âÊï∞Êõ¥Êñ∞
      cardEl.classList.add('representative');
      representativeCd = cd;

      updateDeckSummaryDisplay();//‰ª£Ë°®„Ç´„Éº„Éâ„Éá„ÉÉ„Ç≠ÊÉÖÂ†±Ë°®Á§∫
    });

    container.appendChild(cardEl);
  }

  representativeCd = nextRepresentative;  // ‰ª£Ë°®„Ç´„Éº„Éâ„ÅÆÊúÄÁµÇÁ¢∫ÂÆö
  updateDeckSummaryDisplay();//‰ª£Ë°®„Ç´„Éº„Éâ„Éá„ÉÉ„Ç≠ÊÉÖÂ†±Ë°®Á§∫
}


//‰ª£Ë°®„Ç´„Éº„Éâ„ÇØ„É©„Çπ‰ªò‰∏é
  function updateRepresentativeHighlight() {
    document.querySelectorAll(".deck-entry").forEach(el => {
      el.classList.remove("representative");
      if (el.dataset.cd === representativeCd) {
        el.classList.add("representative");
      }
    });
  }


//‰ª£Ë°®„Ç´„Éº„Éâ„Éá„ÉÉ„Ç≠ÊÉÖÂ†±Ë°®Á§∫
  function updateDeckSummaryDisplay() {
    const name = cardMap[representativeCd]?.name || "Êú™ÈÅ∏Êäû";
    document.getElementById("deck-representative").textContent = name;
  }

  //„Éá„ÉÉ„Ç≠„É™„Çπ„Éà„Äå„Éá„ÉÉ„Ç≠„Çí„Åì„Åì„Å´Ë°®Á§∫„Äç
  function updateDeckEmptyMessage() {
    const deck = document.getElementById("deck-card-list");
    const msg = document.getElementById("deckcard-empty-message");
    if (!deck || !msg) return;
    const cards = deck.querySelectorAll(".deck-entry"); // ‚Üê „Ç´„Éº„Éâ„ÇØ„É©„ÇπÂêç„Å´Âêà„Çè„Åõ„Å¶Â§âÊõ¥

    if (cards.length === 0) {
      msg.style.display = "flex";
    } else {
      msg.style.display = "none";
    }
  }


//#endregion

/*==============================
    6.„Éá„ÉÉ„Ç≠ÂàÜÊûê-„Éá„ÉÉ„Ç≠ÊÉÖÂ†±-
===============================*/

//#region

//„Éá„ÉÉ„Ç≠ÂàÜÊûêÁî®Â§âÊï∞
let costChart = null;
let powerChart = null;


/*„Éá„ÉÉ„Ç≠ÊÉÖÂ†±Ê¨Ñ*/
/*Ë™¨Êòé
 * „Éá„ÉÉ„Ç≠ÊÉÖÂ†±Ê¨ÑÔºàÊûöÊï∞„ÉªÁ®ÆÊóè„ÉªÊóßÁ•û„Éª„Çø„Ç§„ÉóÂÜÖË®≥Ôºâ„ÅÆÊõ¥Êñ∞„ÄÇ
 * ÂºïÊï∞ deckCards „ÅØ { Á®ÆÊóè: ..., „Çø„Ç§„Éó: ... } „ÅÆÈÖçÂàó„ÄÇ
 */
function updateDeckSummary(deckCards) {
  // ÊûöÊï∞
  document.getElementById("deck-count").textContent = deckCards.length;

  // „É°„Ç§„É≥Á®ÆÊóèÔºà„Ç§„Éé„Çª„É≥„Éà„ÉªÊóßÁ•û„ÇíÈô§Â§ñÔºâ
  const races = [...new Set(deckCards.map(c => c.Á®ÆÊóè))].filter(
    r => r !== "„Ç§„Éé„Çª„É≥„Éà" && r !== "ÊóßÁ•û"
  );
  document.getElementById("deck-races").textContent = races[0] || "Êú™ÈÅ∏Êäû";

  // ÊóßÁ•û„ÅÆË°®Á§∫
  const oldGods = deckCards.filter(c => c.Á®ÆÊóè === "ÊóßÁ•û");
  if (oldGods.length === 0) {
    document.getElementById("deck-eldergod").textContent = "Êú™Êé°Áî®";
  } else {
    // „Éá„ÉÉ„Ç≠„Å´Êé°Áî®„Åï„Çå„Å¶„ÅÑ„ÇãÊóßÁ•û1Á®ÆÈ°û„ÅÆ„ÅøË°®Á§∫
    const cd = Object.keys(deck).find(cd => cardMap[cd]?.race === "ÊóßÁ•û");
    const name = cd ? cardMap[cd]?.name || "ÊóßÁ•û" : "ÊóßÁ•û";
    document.getElementById("deck-eldergod").textContent = name;
  }

  // „Çø„Ç§„Éó„Åî„Å®„ÅÆ„Ç´„Ç¶„É≥„Éà
  const countByType = type =>
    deckCards.filter(c => c.„Çø„Ç§„Éó === type).length;
  document.getElementById("count-charger").textContent = countByType("„ÉÅ„É£„Éº„Ç∏„É£„Éº");
  document.getElementById("count-attacker").textContent = countByType("„Ç¢„Çø„ÉÉ„Ç´„Éº");
  document.getElementById("count-blocker").textContent = countByType("„Éñ„É≠„ÉÉ„Ç´„Éº");
}


// ===== „Éá„ÉÉ„Ç≠ÂàÜÊûêÊõ¥Êñ∞ =====
function updateDeckAnalysis() {
  // deck „Å® cardMap „Åã„Çâ„Ç´„Éº„ÉâË©≥Á¥∞„ÇíÂ±ïÈñã
  const deckCards = [];
  Object.entries(deck).forEach(([cd, count]) => {
    const card = cardMap[cd];
    if (!card) return;
    for (let i = 0; i < count; i++) {
      deckCards.push({
        cd,
        race: card.race,
        type: card.type,
        cost: parseInt(card.cost) || 0,
        power: parseInt(card.power) || 0,
        rarity: card.rarity || ''
      });
    }
  });

  // „É¨„Ç¢„É™„ÉÜ„Ç£ÈõÜË®à
  const rarityCounts = { '„É¨„Ç∏„Çß„É≥„Éâ': 0, '„Ç¥„Éº„É´„Éâ': 0, '„Ç∑„É´„Éê„Éº': 0, '„Éñ„É≠„É≥„Ç∫': 0 };
  deckCards.forEach(c => {
    if (rarityCounts.hasOwnProperty(c.rarity)) rarityCounts[c.rarity]++;
  });
  document.getElementById('rarity-legend').textContent = `üåà${rarityCounts['„É¨„Ç∏„Çß„É≥„Éâ']}`;
  document.getElementById('rarity-gold').textContent   = `üü° ${rarityCounts['„Ç¥„Éº„É´„Éâ']}`;
  document.getElementById('rarity-silver').textContent = `‚ö™Ô∏è ${rarityCounts['„Ç∑„É´„Éê„Éº']}`;
  document.getElementById('rarity-bronze').textContent = `üü§ ${rarityCounts['„Éñ„É≠„É≥„Ç∫']}`;

//„É°„Ç§„É≥Á®ÆÊóèÁéáË®àÁÆó
let mainRaceCount = 0;
deckCards.forEach(c => {
  if (MAIN_RACES.includes(c.race)) {
    mainRaceCount++;
  }
});
let mainRaceRate = 0;
if (deckCards.length > 0) {
  mainRaceRate = (mainRaceCount / deckCards.length) * 100;
}
document.getElementById('race-rate').textContent = `${mainRaceRate.toFixed(1)}%`;


  // „Ç≥„Çπ„Éà„Éª„Éë„ÉØ„Éº„ÅÆÊ£í„Ç∞„É©„Éï„ÇíÁîüÊàê
  // ===== „Ç≥„Çπ„ÉàÔºè„Éë„ÉØ„ÉºÂàÜÂ∏É„Ç∞„É©„Éï =====

  // 1) ÂàÜÂ∏É„ÇíÈõÜË®à
  const costCount = {};
  const powerCount = {};
  deckCards.forEach(c => {
    if (!Number.isNaN(c.cost))  costCount[c.cost]  = (costCount[c.cost]  || 0) + 1;
    if (!Number.isNaN(c.power)) powerCount[c.power] = (powerCount[c.power] || 0) + 1;
  });

  // 2) „É©„Éô„É´„ÇíÁî®ÊÑèÔºàÂ∏∏„Å´Ë¶ã„Åõ„Åü„ÅÑÁõÆÁõõ„Çä„ÇíÊ∑∑„Åú„Å¶Á©∫„Éê„Éº„ÇÇ0„ÅßÂá∫„ÅôÔºâ
  const alwaysShowCosts  = [2, 4, 6, 8, 10, 12];
  const alwaysShowPowers = [0, 4, 5, 6, 7, 8, 12, 16];

  const costLabels = [...new Set([...alwaysShowCosts, ...Object.keys(costCount).map(Number)])]
    .sort((a,b)=>a-b);
  const powerLabels = [...new Set([...alwaysShowPowers, ...Object.keys(powerCount).map(Number)])]
    .sort((a,b)=>a-b);

  const costData  = costLabels.map(k => costCount[k]  || 0);
  const powerData = powerLabels.map(k => powerCount[k] || 0);

// 3) Á∑è„Ç≥„Çπ„Éà/„Éë„ÉØ„ÉºË°®Á§∫
// Á∑è„Ç≥„Çπ„ÉàË®àÁÆó
const sumCost = deckCards.reduce((s, c) => s + (c.cost || 0), 0);
const sumCostEl = document.getElementById('total-cost');
if (sumCostEl) sumCostEl.textContent = String(sumCost);

// „Çø„Ç§„ÉóÂà•Á∑è„Éë„ÉØ„ÉºË®àÁÆó
let chargerPower = 0;
let attackerPower = 0;
deckCards.forEach(c => {
  if (c.type === "„ÉÅ„É£„Éº„Ç∏„É£„Éº") {
    chargerPower += (c.power || 0);
  } else if (c.type === "„Ç¢„Çø„ÉÉ„Ç´„Éº") {
    attackerPower += (c.power || 0);
  }
});

// Ë°®Á§∫
const sumPowerEl = document.getElementById('total-power');
if (sumPowerEl) {
  sumPowerEl.textContent = `üîµ${chargerPower} üü£${attackerPower}`;
}


// 4) ÂàùÊâã‰∫ãÊïÖÁéáÔºà„Éû„É™„Ç¨„É≥ÂØæÂøúÔºâ
// ÂèØ„Å®„Åø„Å™„ÅôÊù°‰ª∂Ôºö„Ç≥„Çπ„Éà4‰ª•‰∏ã
const earlyPlayable = deckCards.filter(c => (c.cost || 0) <= 4).length;

// „Éû„É™„Ç¨„É≥ÊûöÊï∞„ÅÆÂèçÊò†Ôºövalue="0" „ÅÆ„Å®„Åç 4Êûö„ÄÅ‰ª•Èôç value „ÅÆÂàÜ„Å†„Åë +1
const mulliganEl = document.getElementById('mulligan-count');
const mulliganVal = parseInt(mulliganEl?.value ?? '0', 10) || 0;
const draws = 4 + mulliganVal;

// ‰∫ãÊïÖÁéáÔºà= Âºï„ÅÑ„ÅüÂÖ®„Ç´„Éº„Éâ„Åå„ÄåÈùû„Éó„É¨„Ç§ÂèØËÉΩ„Äç„Å´„Å™„ÇãÁ¢∫ÁéáÔºâ
const badRatePercent = calculateBadHandRate(deckCards.length, earlyPlayable, draws) * 100;

// Ë°®Á§∫
const badRateEl = document.getElementById('bad-hand-rate');
if (badRateEl) badRateEl.textContent = `${badRatePercent.toFixed(1)}%`;

// 1%‰ª•‰∏ã„Å™„ÇâÊ≥®Ë®ò„ÇíË°®Á§∫„ÄÅ„Åù„Çå‰ª•Â§ñ„ÅØÈùûË°®Á§∫
let freqEl = document.getElementById('bad-hand-frequency');
// ÂøÖË¶Å„Å™„ÇâËá™ÂãïÁîüÊàêÔºàHTML„Å´Êó¢„Å´„ÅÇ„Çã„Å™„Çâ„Åì„ÅÆÂ°ä„ÅØÂÆüË°å„Åï„Çå„Åæ„Åõ„ÇìÔºâ
if (!freqEl && badRateEl) {
  freqEl = document.createElement('span');
  freqEl.id = 'bad-hand-frequency';
  freqEl.textContent = 'Ôºà„Åª„Åº‰∫ãÊïÖ„Å™„ÅóÔºâ';
  badRateEl.insertAdjacentElement('afterend', freqEl);
}
if (freqEl) {
  freqEl.style.display = (badRatePercent <= 1) ? '' : 'none';
}


// 5) „Éá„Éº„Çø„É©„Éô„É´ÔºàÊúÄÂàù„Å´‰∏ÄÂ∫¶„Å†„Åë„ÅßOKÔºâ
try { Chart.register(window.ChartDataLabels); } catch (_) {}

// 6) Á©ç„Åø‰∏ä„ÅíÊ£í„Ç∞„É©„ÉïÔºà„Çø„Ç§„ÉóÂà•Ôºâ
const TYPES = ['„ÉÅ„É£„Éº„Ç∏„É£„Éº', '„Ç¢„Çø„ÉÉ„Ç´„Éº', '„Éñ„É≠„ÉÉ„Ç´„Éº'];
const COLORS = {
  '„ÉÅ„É£„Éº„Ç∏„É£„Éº': 'rgba(119, 170, 212, 0.7)',
  '„Ç¢„Çø„ÉÉ„Ç´„Éº':   'rgba(125, 91, 155, 0.7)',
  '„Éñ„É≠„ÉÉ„Ç´„Éº':   'rgba(214, 212, 204, 0.7)',
};

function buildStackCounts(cards, key, labels) {
  const table = {};
  TYPES.forEach(t => { table[t] = Object.fromEntries(labels.map(l => [l, 0])); });
  cards.forEach(c => {
    const v = Number(c[key]);
    const t = c.type;
    if (!Number.isNaN(v) && table[t] && v in table[t]) table[t][v]++;
  });
  return TYPES.map(t => ({
    label: t,
    data: labels.map(l => table[t][l] || 0),
    backgroundColor: COLORS[t],
    borderWidth: 0,
    barPercentage: 0.9,
    categoryPercentage: 0.9,
  }));
}

// costLabels / powerLabels „ÅØ„Åì„Çå„Åæ„ÅßÈÄö„Çä‰ΩúÊàêÊ∏à„Åø„Å®„Åô„Çã
const costDatasets  = buildStackCounts(deckCards, 'cost',  costLabels);
const powerDatasets = buildStackCounts(deckCards, 'power', powerLabels);

const commonOptions = {
  responsive: true,
  maintainAspectRatio: false,
  scales: {
    x: { stacked: true, grid: { display: false, drawBorder: false }, title: { display: false }, ticks: { autoSkip: false } },
    y: { stacked: true, beginAtZero: true, grid: { display: false, drawBorder: false }, title: { display: false }, ticks: { display: false } }
  },
  plugins: {
    legend: { display: false },
    datalabels: { display: true, anchor: 'center', align: 'center', formatter: v => v > 0 ? v : '', font: { weight: 600 }, clamp: true },
    tooltip: { enabled: true },
  },
};

// Êó¢Â≠ò„ÉÅ„É£„Éº„Éà„Åå„ÅÇ„Çå„Å∞Á†¥Ê£Ñ„Åó„Å¶„Åã„Çâ‰Ωú„ÇäÁõ¥„Åó
if (costChart)  costChart.destroy();
if (powerChart) powerChart.destroy();

const costCtx  = document.getElementById('costChart')?.getContext('2d');
const powerCtx = document.getElementById('powerChart')?.getContext('2d');

if (costCtx) {
  costChart = new Chart(costCtx, { type: 'bar', data: { labels: costLabels,  datasets: costDatasets  }, options: commonOptions });
}
if (powerCtx) {
  powerChart = new Chart(powerCtx,{ type: 'bar', data: { labels: powerLabels, datasets: powerDatasets }, options: commonOptions });
}

}

// ===== ÂàùÊâã‰∫ãÊïÖÁéáË®àÁÆóÁî® =====
function combination(n, k) {
  if (k < 0 || k > n) return 0;
  if (k === 0 || k === n) return 1;
  let result = 1;
  for (let i = 1; i <= k; i++) result = (result * (n - k + i)) / i;
  return result;
}
function calculateBadHandRate(total, early, draws) {
  const nonPlayable = total - early;
  if (nonPlayable < draws) return 0;
  const numer = combination(nonPlayable, draws);
  const denom = combination(total, draws);
  return denom === 0 ? 0 : numer / denom;
}

// ===== ÂàÜÊûêË°®Á§∫ÂàáÊõø =====
function toggleAnalysis() {
  const section = document.getElementById("analysis-section");
  const btn = document.getElementById("toggle-analysis-btn");
  const isOpen = section.classList.toggle("open");
  if (isOpen) {
    updateDeckAnalysis(); // Èñã„Åè„Å®„Åç„Å†„ÅëÂàÜÊûê„ÇíÊõ¥Êñ∞
    updateExchangeSummary();// „Éù„Ç§„É≥„ÉàÁ≠â„ÅÆ„Çµ„Éû„É™„Éº„ÇíÊõ¥Êñ∞
    btn.textContent = "‚¨Ü ÂàÜÊûê„ÇíÈö†„Åô";
  } else {
    btn.textContent = "üîç ÂàÜÊûê„ÇíË°®Á§∫";
  }
}


// „Éû„É™„Ç¨„É≥ÊûöÊï∞Â§âÊõ¥ÊôÇ„Å´ÂÜçË®àÁÆó
document.getElementById('mulligan-count')?.addEventListener('change', () => updateDeckAnalysis());

/* =========================
   ‰∫§Êèõ„Éù„Ç§„É≥„ÉàË®àÁÆó„Å®Ë°®Á§∫
   - ‰∏çË∂≥ÊûöÊï∞ = „Éá„ÉÉ„Ç≠Ë¶ÅÊ±Ç - ÊâÄÊåÅÂêàË®à(normal+shine+premium)
   - ‰∏çË∂≥ÂàÜ„ÅÆ„Åø„Çí„Éù„Ç§„É≥„Éà/„ÉÄ„Ç§„É§/Á†Ç„Å´ÊèõÁÆó
   - Á†Ç„ÅØUI„Å´Âêà„Çè„Åõ„Å¶„É¨„Ç∏„Çß„É≥„Éâ/„Ç¥„Éº„É´„Éâ„ÅÆ„ÅøË°®Á§∫
========================= */

// 1Êûö„ÅÇ„Åü„Çä„ÅÆ‰∫§Êèõ„É¨„Éº„ÉàÔºàÂâç„Å´ÂÖ•„Çå„Å¶„ÅÑ„Åü export „ÅØ‰∏çË¶Å„Åß„ÅôÔºâ
const EXCHANGE_RATE = {
  point:   { LEGEND: 300, GOLD: 150, SILVER: 20,  BRONZE: 10 },
  diamond: { LEGEND: 4000, GOLD: 1000, SILVER: 250, BRONZE: 150 },
  sand:    { LEGEND: 300, GOLD: 150, SILVER: 20,  BRONZE: 10 },
};

function rarityToKey(r) {
  if (!r) return null;
  if (r.includes('„É¨„Ç∏„Çß')) return 'LEGEND';
  if (r.includes('„Ç¥„Éº„É´„Éâ')) return 'GOLD';
  if (r.includes('„Ç∑„É´„Éê„Éº')) return 'SILVER';
  if (r.includes('„Éñ„É≠„É≥„Ç∫')) return 'BRONZE';
  if (r === '„É¨„Ç∏„Çß„É≥„Éâ') return 'LEGEND';
  if (r === '„Ç¥„Éº„É´„Éâ') return 'GOLD';
  if (r === '„Ç∑„É´„Éê„Éº') return 'SILVER';
  if (r === '„Éñ„É≠„É≥„Ç∫') return 'BRONZE';
  return null;
}
function rarityIconJP(rarity) {
  if (!rarity) return '';
  if (rarity.includes('„É¨„Ç∏„Çß'))  return 'üåà';
  if (rarity.includes('„Ç¥„Éº„É´„Éâ')) return 'üü°';
  if (rarity.includes('„Ç∑„É´„Éê„Éº')) return '‚ö™Ô∏è';
  if (rarity.includes('„Éñ„É≠„É≥„Ç∫')) return 'üü§';
  return '';
}

// ÊâÄÊåÅÔºùOwnedStoreÂÑ™ÂÖàÔºàÊú™ÂàùÊúüÂåñÊôÇ„ÅØ localStorageÔºâ
// Êó¢„Å´ page2.js „Å´„ÅÇ„Çã readOwnedMapForDeckmaker() „Çí„Åù„ÅÆ„Åæ„Åæ‰Ωø„ÅÑ„Åæ„Åô

function computeExchangeNeeds() {
  const owned = readOwnedMapForDeckmaker();
  let point = 0, diamond = 0;
  const sand = { LEGEND: 0, GOLD: 0, SILVER: 0, BRONZE: 0 };
  const shortages = [];

  for (const [cd, need] of Object.entries(deck)) {
    const info = cardMap[cd];
    if (!info) continue;
    const key = rarityToKey(info.rarity);
    if (!key) continue;

    const v = owned[cd] || { normal:0, shine:0, premium:0 };
    const have = (v.normal|0) + (v.shine|0) + (v.premium|0);
    const shortage = Math.max(0, (need|0) - have);
    if (!shortage) continue;

    point   += EXCHANGE_RATE.point[key]   * shortage;
    diamond += EXCHANGE_RATE.diamond[key] * shortage;
    sand[key] += EXCHANGE_RATE.sand[key]  * shortage;


    shortages.push({ cd, name: info.name, shortage });
  }
  return { point, diamond, sand, shortages };
}

function updateExchangeSummary() {
  const els = {
    point:    document.getElementById('point-cost'),
    diamond:  document.getElementById('diamond-cost'),
    sandLeg:  document.getElementById('sand-leg'),
    sandGld:  document.getElementById('sand-gld'),
    sandSil:  document.getElementById('sand-sil'),
    sandBro:  document.getElementById('sand-bro'),
  };
  if (!els.point) return;

  const { point, diamond, sand, shortages } = computeExchangeNeeds();
  const fmt = (n) => String(n);

  // Êï∞ÂÄ§„ÅÆÊõ¥Êñ∞
  els.point.textContent   = fmt(point);
  els.diamond.textContent = fmt(diamond);
  els.sandLeg.textContent = fmt(sand.LEGEND);
  els.sandGld.textContent = fmt(sand.GOLD);
  els.sandSil.textContent = fmt(sand.SILVER);
  els.sandBro.textContent = fmt(sand.BRONZE);

  // ‰∏çË∂≥„Ç´„Éº„ÉâÔºàHTML„Å´Áõ¥Êé•Êõ∏„ÅçËæº„ÅøÔºâ
  const list = document.getElementById('shortage-list');
  if (!list) return;

  list.innerHTML = '';
  if (!shortages || shortages.length === 0) {
    list.textContent = '„Å™„Åó';
  } else {
    // ‰∏¶„Å≥È†ÜÔºö„Çø„Ç§„Éó‚Üí„Ç≥„Çπ„Éà‚Üí„Éë„ÉØ„Éº‚Üícd
    const typeOrder = { '„ÉÅ„É£„Éº„Ç∏„É£„Éº': 0, '„Ç¢„Çø„ÉÉ„Ç´„Éº': 1, '„Éñ„É≠„ÉÉ„Ç´„Éº': 2 };

    const sorted = shortages.slice().sort((a, b) => {
      const A = cardMap[a.cd] || {};
      const B = cardMap[b.cd] || {};
      const tA = typeOrder[A.type] ?? 99;
      const tB = typeOrder[B.type] ?? 99;
      if (tA !== tB) return tA - tB;

      const cA = parseInt(A.cost) || 0;
      const cB = parseInt(B.cost) || 0;
      if (cA !== cB) return cA - cB;

      const pA = parseInt(A.power) || 0;
      const pB = parseInt(B.power) || 0;
      if (pA !== pB) return pA - pB;

      return String(a.cd).localeCompare(String(b.cd));
    });

    sorted.forEach(({ cd, name, shortage }) => {
      const info = cardMap[cd] || {};
      const icon = rarityIconJP(info.rarity);
      const line = document.createElement('div');
      // ‰æãÔºâüü°ÊÉÖÁÜ±„ÅÆ„Éä„ÉÅ„É•„É™„Ç¢ „Çµ„É©√ó3
      line.textContent = `${icon}${name}√ó${shortage}`;
      list.appendChild(line);
    });
  }
}

// ÊâÄÊåÅ„Éá„Éº„ÇøÁ≥ª„Éë„Éç„É´„ÅÆË°®Á§∫ÂàáÊõøÔºàÊâÄÊåÅÂèçÊò†ON „Åæ„Åü„ÅØ „Ç≤„Çπ„Éà„É¢„Éº„ÉâÊôÇ„Å´Ë°®Á§∫Ôºâ
function updateOwnedPanelsVisibility() {
  const show = ownedOverlayOn || !!window.__guestOwnedActive;
  const ex = document.querySelector('#deck-info .exchange-summary');
  const sh = document.getElementById('shortage-block');
  if (ex) ex.style.display = show ? 'block' : 'none';
  if (sh) sh.style.display = show ? 'block' : 'none';
}


// Ë°®Á§∫Âàá„ÇäÊõø„ÅàÔºà„Éú„Çø„É≥„ÅÆ onclick="toggleExchange()" „Åã„ÇâÂëº„Å∞„Çå„ÇãÔºâ
let __exchangeMode = 'point'; // 'point' | 'diamond' | 'sand'

function setExchangeVisible(mode) {
  const elPoint = document.getElementById('exchange-point');
  const elDia   = document.getElementById('exchange-diamond');
  const elSand  = document.getElementById('exchange-sand');
  if (elPoint) elPoint.style.display = (mode === 'point'   ? '' : 'none');
  if (elDia)   elDia.style.display   = (mode === 'diamond' ? '' : 'none');
  if (elSand)  elSand.style.display  = (mode === 'sand'    ? '' : 'none');

  const btn = document.getElementById('exchange-toggle-btn');
  if (btn) {
    btn.textContent =
      mode === 'point'   ? 'üü¢ „Éù„Ç§„É≥„Éà' :
      mode === 'diamond' ? 'üíé „ÉÄ„Ç§„É§' :
                           'ü™® Á†Ç';
  }
}

function toggleExchange() {
  __exchangeMode = (__exchangeMode === 'point')
    ? 'diamond'
    : (__exchangeMode === 'diamond' ? 'sand' : 'point');
  setExchangeVisible(__exchangeMode);
}

// ÂàùÊúüË°®Á§∫„ÅØ„Éù„Ç§„É≥„Éà
document.addEventListener('DOMContentLoaded', () => {
  setExchangeVisible('point');
  updateExchangeSummary();
});

// ÊâÄÊåÅ„Éá„Éº„Çø„ÅåÂ§â„Çè„Å£„Åü„ÇâËá™Âãï„ÅßÂÜçË®àÁÆóÔºàOwnedStore.onChange „Åå„ÅÇ„Çã„ÅÆ„ÅßÂà©Áî®Ôºâ
if (window.OwnedStore?.onChange) {
  window.OwnedStore.onChange(() => updateExchangeSummary());
}

// „Ç∞„É≠„Éº„Éê„É´ÂÖ¨ÈñãÔºàHTML„ÅÆ onclick „Åã„Çâ‰Ωø„ÅÜÔºâ
window.toggleExchange = toggleExchange;
window.updateExchangeSummary = updateExchangeSummary;

window.updateDeckAnalysis = updateDeckAnalysis;

//#endregion


/*=================================
      7.„Éá„ÉÉ„Ç≠‰øùÂ≠òÊ©üËÉΩ
================================*/
//#region


// ‰øùÂ≠ò„Éá„ÉÉ„Ç≠„É™„Çπ„ÉàÁ¢∫Ë™ç
function updateSavedDeckList() {
  const container = document.getElementById("savedDeckList");
  const counter   = document.getElementById("savedDeckCount");
  if (!container) return;

  container.innerHTML = "";

  const multiSaved = JSON.parse(localStorage.getItem("savedDecks") || "[]");

  if (counter) {
    counter.textContent = `‰øùÂ≠ò„Éá„ÉÉ„Ç≠Êï∞Ôºö${multiSaved.length} / 20`;
  }

  if (multiSaved.length > 0) {
    let mutated = false;
    multiSaved.forEach((deckData, index) => {
      if (!deckData.date) {
        deckData.date = formatYmd();
        mutated = true;
      }
      const html = generateDeckLayout(deckData, index);
      container.insertAdjacentHTML("beforeend", html);
    });
    if (mutated) {
      try {
        localStorage.setItem("savedDecks", JSON.stringify(multiSaved));
      } catch (e) {
        console.warn("‰øùÂ≠ò„Éá„Éº„Çø„ÅÆË™≠„ÅøËæº„Åø„Å´Â§±Êïó:", e);
      }
    }
    return;
  }

  // Á©∫Ë°®Á§∫
  container.innerHTML = `
    <div class="saved-deck-empty">
      <p>‰øùÂ≠ò„Åï„Çå„Åü„Éá„ÉÉ„Ç≠„ÅØ„Åæ„Å†„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ</p>
    </div>
  `;
}


// ‰øùÂ≠ò„Éá„ÉÉ„Ç≠1‰ª∂„ÅÆ„Ç´„Éº„ÉâÈõÜË®à„Åã„Çâ„É°„Ç§„É≥Á®ÆÊóè„ÇíÊ±∫ÂÆöÔºà„Ç§„Éé„Çª„É≥„Éà„ÉªÊóßÁ•û„ÇíÈô§Â§ñÔºâ
function pickMainRaceFromCounts(cardCounts) {
  const tally = {};
  for (const cd in cardCounts || {}) {
    const info = cardMap[cd];
    if (!info) continue;
    const r = info.race;
    if (r === "„Ç§„Éé„Çª„É≥„Éà" || r === "ÊóßÁ•û") continue;
    tally[r] = (tally[r] || 0) + (cardCounts[cd] || 0);
  }
  let best = "Êú™ÈÅ∏Êäû", bestCnt = -1;
  for (const r in tally) {
    if (tally[r] > bestCnt) {
      best = r;
      bestCnt = tally[r];
    }
  }
  return bestCnt > 0 ? best : "Êú™ÈÅ∏Êäû";
}

// ‰øùÂ≠ò„Éá„ÉÉ„Ç≠Ë°®Á§∫
function generateDeckLayout(deckData, index) {
  let cardImg   = "img/10001.webp";
  let deckName  = "ÂêçÁß∞Êú™Ë®≠ÂÆö";
  let race      = "Êú™ÈÅ∏Êäû";
  let count     = "0/30~40";
  let typeCount = "üîµ0üü£0‚ö™Ô∏è0";
  let savedDate = "";

  if (deckData && deckData.cardCounts) {
    // ÈõÜË®à
    let total = 0, charge = 0, attack = 0, block = 0;
    for (const cd in deckData.cardCounts) {
      const n = deckData.cardCounts[cd] || 0;
      if (n <= 0) continue;
      total += n;
      const info = cardMap[cd];
      if (!info) continue;
      if (info.type === "„ÉÅ„É£„Éº„Ç∏„É£„Éº") charge += n;
      if (info.type === "„Ç¢„Çø„ÉÉ„Ç´„Éº")  attack += n;
      if (info.type === "„Éñ„É≠„ÉÉ„Ç´„Éº")  block  += n;
    }
    count     = `${total}/30~40`;
    typeCount = `üîµ${charge}üü£${attack}‚ö™Ô∏è${block}`;
    deckName  = deckData.name || "ÂêçÁß∞Êú™Ë®≠ÂÆö";
    race      = pickMainRaceFromCounts(deckData.cardCounts);

    if (deckData.m) {
      cardImg = "img/" + String(deckData.m).padStart(5, "0") + ".webp";
    }
    savedDate = deckData.date ? deckData.date : "";
  }

  const loadBtn   = `<button onclick="loadDeckFromIndex(${index})">üîÑ Ë™≠„ÅøËæº„ÇÄ</button>`;
  const deleteBtn = `<button onclick="deleteDeckFromIndex(${index})">üóë ÂâäÈô§</button>`;
  return `
    <div class="saved-deck-item">
      <img src="${cardImg}" alt="‰ª£Ë°®„Ç´„Éº„Éâ" />
      <div class="saved-deck-info">
        <div class="row">
          <strong>${deckName}</strong>
          <span>‰ΩøÁî®Á®ÆÊóèÔºö${race}</span>
        </div>
        <div class="row">
          <span>${count}</span>
          <span>${typeCount}</span>
        </div>
        ${savedDate ? `<div class="row"><small>‰øùÂ≠òÊó•ÊôÇ: ${savedDate}</small></div>` : ""}
      </div>
      <div class="deck-buttons">
        ${loadBtn}
        ${deleteBtn}
      </div>
    </div>
  `;
}



// üíæ ÁèæÂú®„ÅÆ„Éá„ÉÉ„Ç≠„Çí‰∏ÄÊôÇ‰øùÂ≠òÔºàË§áÊï∞ÂØæÂøúÔºâ
function saveDeckToLocalStorage() {
  const saved = JSON.parse(localStorage.getItem("savedDecks") || "[]");

  // „Éá„ÉÉ„Ç≠„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„ÅåÁ©∫„Å™„Çâ‰øùÂ≠ò„Åó„Å™„ÅÑ
  if (Object.keys(deck).length === 0) {
    alert("„Éá„ÉÉ„Ç≠„ÅåÁ©∫„Åß„Åô");
    return;
  }

  // ‰ª£Ë°®„Ç´„Éº„Éâ„Å®„É°„Ç§„É≥Á®ÆÊóè„Ç≥„Éº„ÉâÁÆóÂá∫
  const m = (representativeCd && deck[representativeCd]) ? representativeCd : (Object.keys(deck)[0] || "10001");

  const raceCodeMap = { "„Éâ„É©„Ç¥„É≥": 1, "„Ç¢„É≥„Éâ„É≠„Ç§„Éâ": 2, "„Ç®„É¨„É°„É≥„Çø„É´": 3, "„É´„Éü„Éä„Çπ": 4, "„Ç∑„Çß„Ç§„Éâ": 5 };

  const g = raceCodeMap[getMainRace()] || 1;

  let deckNameInput = document.getElementById("deck-name")?.value.trim();

  // Êú™ÂÖ•Âäõ„Å™„Çâ„Äå„Éá„ÉÉ„Ç≠„Äá„ÄçÂΩ¢Âºè„ÅßÊé°Áï™
  if (!deckNameInput) {
    let num = 1;
    const existingNames = saved.map(d => d.name);
    while (existingNames.includes(`„Éá„ÉÉ„Ç≠${num}`)) {
      num++;
    }
    deckNameInput = `„Éá„ÉÉ„Ç≠${num}`;
  }

  // ÂêåÂêç„ÅåÂ≠òÂú®„Åô„ÇãÂ†¥Âêà„ÅØ‰∏äÊõ∏„ÅçÁ¢∫Ë™ç
  const existingIndex = saved.findIndex(d => d.name === deckNameInput);
  if (existingIndex !== -1) {
    if (!confirm(`ÂêåÂêç„ÅÆ„Éá„ÉÉ„Ç≠„Äå${deckNameInput}„Äç„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ‰∏äÊõ∏„Åç„Åó„Åæ„Åô„ÅãÔºü`)) {
      return; // „Ç≠„É£„É≥„Çª„É´ÊôÇ„ÅØ‰øùÂ≠ò„Åó„Å™„ÅÑ
    }
    // ‰∏äÊõ∏„Åç
    saved[existingIndex] = {
      name: deckNameInput,
      cardCounts: { ...deck },
      m,
      g,
      date: formatYmd()
    };
    //„Éá„Éº„Çø„Çí„Ç¢„Éó„É™„Å´‰øùÂ≠ò
    localStorage.setItem("savedDecks", JSON.stringify(saved));
    updateSavedDeckList();//‰øùÂ≠ò„Éá„ÉÉ„Ç≠Ë°®Á§∫Êõ¥Êñ∞
    return;
  }

  // Êñ∞Ë¶è‰øùÂ≠òÔºà‰∏äÈôê20Ôºâ
  if (saved.length >= 20) {
    alert("‰øùÂ≠ò„Åß„Åç„Çã„Éá„ÉÉ„Ç≠„ÅØ20‰ª∂„Åæ„Åß„Åß„Åô");
    return;
  }

  saved.push({
    name: deckNameInput,
    cardCounts: { ...deck },
    m,
    g,
    date: formatYmd()
  });
  localStorage.setItem("savedDecks", JSON.stringify(saved));
  updateSavedDeckList();
}

// üîÑ „Ç§„É≥„Éá„ÉÉ„ÇØ„ÇπÊåáÂÆö„ÅßË™≠„ÅøËæº„Åø
function loadDeckFromIndex(index) {
  const saved = JSON.parse(localStorage.getItem("savedDecks") || "[]");
  if (!saved[index]) return;
  const data = saved[index];

  // ÁèæÂú®„ÅÆ„Éá„ÉÉ„Ç≠„Çí„ÇØ„É™„Ç¢„Åó„Å¶Ë™≠„ÅøËæº„Åø
  Object.keys(deck).forEach(k => delete deck[k]);
  Object.entries(data.cardCounts).forEach(([cd, n]) => {
    deck[cd] = n;
  });

  // ‰ª£Ë°®„Ç´„Éº„ÉâÂæ©ÂÖÉ
  representativeCd = data.m && deck[data.m] ? data.m : null;

  // üîΩ „Éá„ÉÉ„Ç≠ÂêçÂÖ•ÂäõÊ¨Ñ„Å´ÂèçÊò†
  const nameInput = document.getElementById("deck-name");
  if (nameInput) {
    nameInput.value = data.name || ""; // „Å™„ÅÑÂ†¥Âêà„ÅØÁ©∫„Å´
  }
  updateDeck(); // „Éá„ÉÉ„Ç≠Ê¨ÑÊõ¥Êñ∞
  renderDeckList();//„Éá„ÉÉ„Ç≠„É™„Çπ„ÉàÁîªÂÉèÊõ¥Êñ∞
  updateDeckSummaryDisplay();//‰ª£Ë°®„Ç´„Éº„Éâ„Éá„ÉÉ„Ç≠ÊÉÖÂ†±Ë°®Á§∫
  updateExchangeSummary();//‰∫§Êèõ„Éù„Ç§„É≥„ÉàÊï∞Êõ¥Êñ∞
}

// üóë „Ç§„É≥„Éá„ÉÉ„ÇØ„ÇπÊåáÂÆö„ÅßÂâäÈô§
function deleteDeckFromIndex(index) {
  const saved = JSON.parse(localStorage.getItem("savedDecks") || "[]");
  if (!saved[index]) return;
  saved.splice(index, 1);
  localStorage.setItem("savedDecks", JSON.stringify(saved));
  updateSavedDeckList();
  renderDeckList();//„Éá„ÉÉ„Ç≠„É™„Çπ„ÉàÁîªÂÉèÊõ¥Êñ∞
}


// ‚ôª „Éá„ÉÉ„Ç≠„ÇíÂÆåÂÖ®„É™„Çª„ÉÉ„ÉàÔºà„É°„É¢„É™„ÇÇË°®Á§∫„ÇÇÁ©∫Ôºâ
document.getElementById("resetDeckButton")?.addEventListener("click", () => {
  Object.keys(deck).forEach(k => delete deck[k]);
  representativeCd = null; //‰ª£Ë°®„Ç´„Éº„Éâ„É™„Çª„ÉÉ„Éà
  updateDeck();// „Éá„ÉÉ„Ç≠Ê¨ÑÊõ¥Êñ∞
  renderDeckList();//„Éá„ÉÉ„Ç≠„É™„Çπ„ÉàÁîªÂÉèÊõ¥Êñ∞
});


//#endregion